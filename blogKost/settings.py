"""
Django settings for blogKost project.
# -*- coding: utf-8 -*-  

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(@#jf4_s95tp@=69l!30zzv$_0czq&&vruvm65r7_%6ts!43)o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['blogkost.herokuapp.com']

# DATABASES = { 'default' : dj_database_url.config()}

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# try to load local_settings.py if it exists
try:
  from local_settings import *
except Exception as e:
  pass


# Application definition

INSTALLED_APPS = (

    'ckeditor',
    'embed_video',
    'article',
    'loginsys',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'guardian',
    'easy_thumbnails',
    'mptt',
    'storages',
    'boto',
    'social.apps.django_app.default'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.contrib.vkontakte.VKontakteOAuth2Backend',
    'social_auth.backends.facebook.FacebookBackend',
    'social_auth.backends.google.GoogleOAuth2Backend',
    'social_auth.backends.twitter.TwitterBackend',
    # 'social_auth.backends.contrib.yandex.YandexOAuth2Backend',
    'social_auth.backends.contrib.mailru.MailruBackend',
    'social_auth.backends.contrib.odnoklassniki.OdnoklassnikiBackend',
    'django.contrib.auth.backends.ModelBackend',  # default
    'guardian.backends.ObjectPermissionBackend',
    'social_auth.backends.pipeline.social.social_auth_user',
    #'social_auth.backends.pipeline.associate.associate_by_email',
    'social_auth.backends.pipeline.user.get_username',
    'social_auth.backends.pipeline.user.create_user',
    'social_auth.backends.pipeline.social.associate_user',
    'social_auth.backends.pipeline.social.load_extra_data',
    'social_auth.backends.pipeline.user.update_user_details',
     'social.backends.open_id.OpenIdAuth',
       'social.backends.vkontakte.VKontakteOAuth2Backend',
       'social.backends.vk.VKOAuth2'
    'social.backends.google.GoogleOpenId',
    'social.backends.google.GoogleOAuth2',
    'social.backends.google.GoogleOAuth',
    'social.backends.twitter.TwitterOAuth',
    'social.backends.facebook.FacebookOAuth2',
)



#   SOCIAL_AUTH_PIPELINE = (
#     'social_auth.backends.pipeline.social.social_auth_user',
#     #'social_auth.backends.pipeline.associate.associate_by_email',
#     'social_auth.backends.pipeline.user.get_username',
#     'social_auth.backends.pipeline.user.create_user',
#     'social_auth.backends.pipeline.social.associate_user',
#     'social_auth.backends.pipeline.social.load_extra_data',
#     'social_auth.backends.pipeline.user.update_user_details'
# )
# 
SOCIAL_AUTH_STRATEGY = 'social.strategies.django_strategy.DjangoStrategy'
SOCIAL_AUTH_STORAGE = 'social.apps.django_app.default.models.DjangoStorage'


SOCIAL_AUTH_VK_OAUTH2_KEY = '5442665'
SOCIAL_AUTH_VK_OAUTH2_SECRET = '3G071EhyKWyoQwmIc651'

SOCIAL_AUTH_VK_APP_KEY = '5442665'
SOCIAL_AUTH_VK_API_SECRET = '3G071EhyKWyoQwmIc651'

FACEBOOK_APP_ID = '93345789454'
FACEBOOK_API_SECRET = 'vksdf78234jmiv90234ms0ds8g54miv9s'

TWITTER_CONSUMER_KEY = 'jJidwMvjasdKLzxcmaaPw'
TWITTER_CONSUMER_SECRET = 'SjvUJ8Oi8eoJKvskKe9GicIKD931'

GOOGLE_OAUTH2_CLIENT_ID = '19807546895.apps.googleusercontent.com'
GOOGLE_OAUTH2_CLIENT_SECRET = 'Ksjdaujvx-PoIeq81LxkV893D'

MAILRU_OAUTH2_CLIENT_KEY = '971648'
MAILRU_OAUTH2_CLIENT_SECRET = 'c93kfks046kcvb8et8f63jig0syw8jfq'

YANDEX_OAUTH2_CLIENT_KEY = 'xcvb7ewrtw7yuud58o3asvsihyeqx'
YANDEX_OAUTH2_CLIENT_SECRET = 'xybr8q91j235jhnviwytjsgkxp39kshwu'

ODNOKLASSNIKI_OAUTH2_CLIENT_KEY = '59824691'
ODNOKLASSNIKI_OAUTH2_APP_KEY = 'KLOAPPWIDUDUDUDU'
ODNOKLASSNIKI_OAUTH2_CLIENT_SECRET = 'D879S7VCIY80234KER8QXOTP2'


YANDEX_APP_ID = YANDEX_OAUTH2_CLIENT_KEY
YANDEX_API_SECRET = YANDEX_OAUTH2_CLIENT_SECRET
YANDEX_OAUTH2_API_URL = 'https://api-yaru.yandex.ru/me/'


SOCIAL_AUTH_PIPELINE = (
    'social.pipeline.social_auth.social_details',
    'social.pipeline.social_auth.social_uid',
    'social.pipeline.social_auth.auth_allowed',
    'social.pipeline.social_auth.social_user',
    'social.pipeline.user.get_username',
    'example.app.pipeline.require_email',
    'social.pipeline.mail.mail_validation',
    'social.pipeline.user.create_user',
    'social.pipeline.social_auth.associate_user',
    'social.pipeline.debug.debug',
    'social.pipeline.social_auth.load_extra_data',
    'social.pipeline.user.user_details',
    'social.pipeline.debug.debug'
)

ANONYMOUS_USER_ID = -1

ROOT_URLCONF = 'blogKost.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'article/templates'),
            os.path.join(BASE_DIR, 'loginsys/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'blogKost.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# 
# # we only need the engine name, as heroku takes care of the rest
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql_psycopg2",
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'blogkost',
        'USER': 'skylife',
        'PASSWORD': 'skywww123',
        'HOST': '',
        'PORT': '',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
# 
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)
DATABASES['default'] =  dj_database_url.config()

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'article/static'),
)
# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'


IMAGE_UPLOAD_DIR = "img"

CKEDITOR_UPLOAD_PATH = "uploads/"

MEDIA_URL = '/media/'

MEDIA_ROOT = (
    os.path.join(BASE_DIR, 'media')
)

# if not DEBUG:
#    AWS_STORAGE_BUCKET_NAME = os.environ['blogkost']
#    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
#    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
#    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
#    S3_URL = 'http://%s.s3.amazonaws.com/' % AWS_STORAGE_BUCKET_NAME
#    STATIC_URL = S3_URL

deploy_env = os.environ.get('DEPLOYMENT_ENVIRONMENT', '')
if deploy_env == 'production':
    pass
elif deploy_env == 'staging':
    try:
        from settings_dev_heroku import *
    except ImportError:
        pass
else:
    try:
        from settings_local import *
        INSTALLED_APPS = INSTALLED_APPS + ('debug_toolbar',)
    except ImportError:
        pass
